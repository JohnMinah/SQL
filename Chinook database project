# Chinook Database SQL Analysis  

## Project Overview  
This project explores the **Chinook database** (a digital media store) using SQL to analyze customers, sales, and music trends. Key tasks include filtering geographic data, joining tables, aggregating metrics, and identifying top customers.  

## Key Analyses  
1. **Geographic Segmentation**: Non-US customers and Brazilian sales trends.  
2. **Sales Agent Performance**: Invoices linked to support reps.  
3. **Time-Based Metrics**: 2009 revenue and invoice counts.  
4. **Music Catalog Insights**: Tracks, genres, and artist relationships.  

## SQL Highlights  
- Complex joins (customers, invoices, employees)  
- Aggregations (`SUM`, `COUNT`, `MIN`)  
- Window functions (genre-based comparisons)  
- Date filtering (`strftime` for year-based queries)  



--Show Customers (their full names, customer ID, and country) who are not in the US. (Hint: != or <> can be used to say "is not equal to").

SELECT 
    FirstName,
    LastName,
    CustomerID,
    Country
FROM chinook.customers
WHERE Country != 'USA'
ORDER BY Country, FirstName, LastName;


--Show only the Customers from Brazil.

SELECT 
    FirstName,
    LastName,
    CustomerID,
    Country
FROM chinook.customers
WHERE Country = 'Brazil'
ORDER BY Country, FirstName, LastName;


--Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country.

SELECT 
    c.FirstName || ' ' || c.LastName,
    i.InvoiceID,
    i.InvoiceDate,
    i.BillingCountry
FROM chinook.customers c
JOIN chinook.invoices i
ON c.CustomerID = i.CustomerID
WHERE c.Country = 'Brazil'
ORDER BY c.FirstName, c.LastName;


--Show the Employees who are Sales Support Agents.

SELECT
    LastName,
    FirstName,
    Title
FROM chinook.employees
WHERE Title LIKE '%Sales%Agent%'
ORDER BY
    LastName,
    FirstName;
    

--Find a unique list of billing countries from the Invoice table.

SELECT DISTINCT
    BillingCountry 
FROM chinook.invoices
ORDER BY 
    BillingCountry;


--Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name.

SELECT 
    e.LastName || ' ' || e.FirstName AS SalesAgent,
    i.InvoiceId
FROM
    chinook.employees e
JOIN
    chinook.customers c
ON
    e.EmployeeId = c.SupportRepid
JOIN
    chinook.invoices i
ON
    c.CustomerId = i.CustomerId
ORDER BY e.LastName, e.FirstName;


--Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.

SELECT
    i.InvoiceId,
    i.Total,
    c.FirstName || ' ' || c.LastName AS Customer_Name,
    c.Country,
    e.FirstName || ' ' || e.LastName AS Sales_Agent_Name
FROM chinook.invoices i
LEFT JOIN chinook.customers c
ON i.CustomerId = c.CustomerId
LEFT JOIN employees e
ON e.EmployeeId = c.SupportRepid
ORDER BY 
    c.Country, c.FirstName, c.LastName;
    

--How many Invoices were there in 2009?

SELECT
    COUNT(invoices.InvoiceId) AS Total_Invoices_2009
FROM chinook.invoices
WHERE strftime('%Y', InvoiceDate) = '2009';


--What are the total sales for 2009?

SELECT
    SUM(invoices.Total) AS Total_Sales_2009
FROM chinook.invoices
WHERE strftime('%Y', InvoiceDate) = '2009';


--Write a query that includes the purchased track name with each invoice line ID.

SELECT
    t.Name AS Track_Name,
    ii.InvoiceLineId
FROM chinook.tracks t
JOIN chinook.invoice_items ii
ON t.TrackId = ii.TrackId
ORDER BY ii.InvoiceLineId;


--Write a query that includes the purchased track name AND artist name with each invoice line ID.

SELECT
    t.Name AS Track_Name,
    art.Name AS Artist_Name,
    ii.InvoiceLineId
FROM chinook.tracks t
JOIN chinook.invoice_items ii
ON t.TrackId = ii.TrackId
JOIN chinook.albums alb
ON t.AlbumId = alb.AlbumId
JOIN chinook.artists art
ON alb.ArtistId = art.ArtistId
ORDER BY ii.InvoiceLineId;


--Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.

SELECT 
    t.Name AS Track_Name,
    a.Title AS Album_Title,
    m.Name AS Media_Type,
    g.Name AS Genre
FROM chinook.tracks t
JOIN chinook.albums a
ON t.AlbumId = a.AlbumId
JOIN chinook.media_types m
ON m.MediaTypeId = t.MediaTypeId
JOIN chinook.genres g
ON g.GenreId = t.GenreId
ORDER  BY g.Name, a.Title;



--Write a query that identifies the top 3 customers by total spending.

WITH CTETopSpenders AS (
    SELECT 
        c.customerId,
        c.FirstName || ' ' || c.LastName AS Customer_Name,
        SUM(i.Total) AS Lifetime_Spend
    FROM 
        chinook.customers c
    JOIN 
        chinook.invoices i
    ON c.CustomerId = i.CustomerId
    GROUP BY c.CustomerId
)
SELECT Customer_Name,
       Lifetime_Spend
FROM CTETopSpenders
ORDER BY Lifetime_Spend DESC
LIMIT 3;



--Show each customer's name, their total number of invoices, and the date of their first-ever purchase (oldest invoice).

SELECT 
    c.FirstName || ' ' || c.LastName AS Customer_Name,
    COUNT(i.InvoiceId) AS Total_Invoices,
    MIN(i.InvoiceDate) AS First_Ever_Purchase
FROM 
    customers c
JOIN 
    invoices i ON c.CustomerId = i.CustomerId
GROUP BY 
    c.CustomerId, c.FirstName, c.LastName
ORDER BY 
    First_Ever_Purchase;


--List every track in the Chinook database, but also show the shortest track duration in its genre alongside each trackâ€™s own duration.

SELECT
    t.Name AS Track_Name,
    t.Milliseconds AS Duration_Ms,
    g.Name AS Genre,
    MIN(t.milliseconds) OVER(PARTITION BY g.Name) AS Shortest_In_Genre_Ms
FROM tracks t
JOIN genres g
ON t.GenreId = g.GenreId
ORDER BY Genre, Duration_Ms DESC;



